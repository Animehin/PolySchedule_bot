import telebot
from datetime import datetime, timedelta
from dateutil import parser


def get_args_from_message(message):
    return message.text.split(" ")[1:]


def create_keyboard_from_string_array(array, command, stage=0, days=False):
    keyboard_max_elements = 6
    if not days:
        elem_number = -1
    else:
        elem_number = convertDate(array[0]) - timedelta(days=1)

    keyboard_elements_sorted = []
    elements = []
    for element in array:
        element = element[:25]
        if not days and len(elements) == keyboard_max_elements:
            keyboard_elements_sorted.append(elements)
            elements = [element]
            elem_number = 0
        elif not days:
            elements.append(element)
            elem_number += 1
        else:
            day = convertDate(element)
            day_num = day.weekday()
            prev_day = elem_number
            prev_day_num = prev_day.weekday()
            if prev_day_num == 7:
                prev_day_num = -1
            if (day - prev_day).days < 8 and day_num > prev_day_num:
                elements.append(element)
                elem_number = day
            else:
                keyboard_elements_sorted.append(elements)
                elements = [element]
                elem_number = convertDate(element)
    if len(elements) != 0:
        keyboard_elements_sorted.append(elements)

    keyboards = []
    for element_num in range(len(keyboard_elements_sorted)):
        current_elem = keyboard_elements_sorted[element_num]
        if len(keyboard_elements_sorted) > 1:
            if element_num != len(keyboard_elements_sorted) - 1:
                current_elem.append("üëâüèø")
            if element_num != 0:
                current_elem.insert(0, "üëàüèø")
        keyboard = telebot.types.InlineKeyboardMarkup()
        for key in current_elem:
            keyboard.add(telebot.types.InlineKeyboardButton(text=f"{key}",
                                                            callback_data=f"{command}_{stage}_{key}_{element_num}"))  # "hometask_0_25.12.2012_0"
        keyboards.append(keyboard)

    return keyboards


def convertDate(date):
    return parser.parse(date, dayfirst=True).date()


def parse_callback_data(data):
    args = data.split("_")
    return {'command': args[0], 'step': args[1], 'text': args[2], 'page': args[3]}


def create_human_readable_news(news_array):
    output = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚ò†Ô∏è\n"
    for element in news_array:
        output += f"{element['title']}\n{element['annotation']}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {element['link'][0]}\n"
    return output


def create_weather_for_today(weather_dict):
        return f"üå™–°–≤–æ–¥–∫–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –≤–æ–∑–ª–µ –ì–ó: \n{weather_dict['temp']} –≥—Ä–∞–¥—É—Å–æ–≤, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_dict['feels_like']}\n" \
           f"{weather_dict['condition']}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ {weather_dict['wind_dir']}, {weather_dict['wind_speed']}–º/c."


def generate_menu():
    commands = ["/start", "/getgroup", "/report", "/schedule", "/tasklist"]
    keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    keyboard.row("/start", "/getgroup", "/report")
    keyboard.row("/schedule", "/tasklist")
    return keyboard


def generate_help_message():
    return "–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
                   "/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n" \
                   "/help - –ø–æ–º–æ—â—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n" \
                   "/setgroup [–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã] [–ò–º—è, –§–∞–º–∏–ª–∏—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\n" \
                   "/changegroup [–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã] [–ò–º—è, –§–∞–º–∏–ª–∏—è] - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n" \
                   "/schedule - –≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (—Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é)\n" \
                   "/hometask - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n" \
                   "/tasklist - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã\n"

  
def get_lessons_name_from_schedule(array):
    return {element['scheduledClass'] for element in array}
